Index: scripts/test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from RRT import RRT\r\nimport numpy\r\nfrom Plan import Plan\r\nimport pb_robot\r\nimport table_env\r\nimport IPython\r\nfrom Grasp import Grasp\r\nimport math\r\nimport vobj\r\nfrom TAMP_Functions import *\r\nfrom Place import Place\r\n\r\nif __name__ == '__main__':\r\n    # pb_robot.utils.connect(use_gui=True)\r\n    # pb_robot.utils.disable_real_time()\r\n    # pb_robot.utils.set_default_camera()\r\n\r\n    objects, floor, robot = table_env.execute()\r\n    robot.arm.hand.Open()\r\n    grasp = Grasp(robot, objects)\r\n    rrt = RRT(robot)\r\n    place = Place(robot, objects, floor)\r\n\r\n\r\n    while True:\r\n        q = grasp.grasp('knife')[1]\r\n        robot.arm.SetJointValues(q)\r\n        #robot.arm.hand.Close()\r\n        print(robot.arm.IsCollisionFree(q))\r\n        ans = input('next?')\r\n        if ans.upper() == 'N':\r\n            break\r\n    '''\r\n    while True:\r\n        q_start = robot.arm.GetJointValues()\r\n        print('start', q_start)\r\n        q_end = rrt.sample_config()\r\n        print('goal', q_end)\r\n        path = rrt.motion(q_start, q_end)\r\n        print(path)\r\n        if path is None:\r\n            continue\r\n        input('execute?')\r\n        p = vobj.TrajPath(robot, path)\r\n        p.execute()\r\n        ans = input('next')\r\n        if ans.upper() == 'N':\r\n            break\r\n\r\n    while True:\r\n        q_start = robot.arm.GetJointValues()\r\n        q_goal = rrt.sample_config()\r\n        path = rrt.motion(q_start, q_goal)\r\n        print(path)\r\n        if path is None:\r\n            continue\r\n        p = vobj.TrajPath(robot, path)\r\n        p.execute()\r\n        input('next')\r\n    '''\r\n\r\n    # obj = 'knife'\r\n    # grasp, q = grasp.grasp(obj)\r\n    # robot.arm.SetJointValues(q)\r\n    # grasp = numpy.dot(numpy.linalg.inv(objects[obj].get_transform()), grasp)\r\n    # robot.arm.Grab(objects[obj], grasp)\r\n    # robot.arm.hand.Close()\r\n    # tamp = TAMP_Functions(robot, objects, floor)\r\n    # #old_pos = objects['bowl'].get_transform()\r\n    # while True:\r\n    #     old_pos = vobj.Pose(obj, objects[obj].get_transform())\r\n    #     #obj_pose = sampleTable(obj, old_pos)[0][0].pose\r\n    #     obj_pose = place.samplePlacePose(obj)\r\n    #     world_grasp = numpy.dot(obj_pose, grasp)\r\n    #     new_q = robot.arm.ComputeIK(world_grasp)\r\n    #     if new_q is None:\r\n    #         print('none')\r\n    #         continue\r\n    #     #rrt = RRT(robot, nonmovable=[floor])\r\n    #     #q_start = robot.arm.GetJointValues()\r\n    #     #path = vobj.TrajPath(robot, rrt.motion(q_start, new_q))\r\n    #     #print(path.path)\r\n    #     '''\r\n    #     for num in range(len(path.path)):\r\n    #         print((num+1), '/', len(path.path))\r\n    #         print(robot.arm.IsCollisionFree(path.path[num]))\r\n    #     path.execute()\r\n    #     '''\r\n    #     robot.arm.SetJointValues(new_q)\r\n    #     print(robot.arm.IsCollisionFree(new_q))\r\n    #     input('next')\r\n    #     '''\r\n    #     ans = input('next? (R?)')\r\n    #     while ans.upper() == 'R':\r\n    #         path.execute()\r\n    #         ans = input('next? (R?)')\r\n    #\r\n    #     if ans.upper() == 'N':\r\n    #         break\r\n    #     '''\r\n    '''\r\n    for obj in objects:\r\n        print(obj)\r\n        obj_pose = place.samplePlacePose(obj)\r\n        objects[obj].set_transform(obj_pose)\r\n    '''\r\n    IPython.embed()\r\n    pb_robot.utils.wait_for_user()\r\n    pb_robot.utils.disconnect()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/test.py b/scripts/test.py
--- a/scripts/test.py	(revision 73dffc047bd84122c2bf68ec7a3ec0832b3b5595)
+++ b/scripts/test.py	(date 1655929433367)
@@ -20,8 +20,19 @@
     grasp = Grasp(robot, objects)
     rrt = RRT(robot)
     place = Place(robot, objects, floor)
-
-
+    while True:
+        t = numpy.array([[1, 0, 0, -0.5],
+                         [0, 1, 0, 0],
+                         [0, 0, 1, 0.005],
+                         [0., 0., 0., 1.]])
+        angle = random.uniform(0, 2 * math.pi)
+        rotate = numpy.array([[math.cos(angle), -math.sin(angle), 0, 0],
+                              [math.sin(angle), math.cos(angle), 0, 0],
+                              [0, 0, 1, 0],
+                              [0., 0., 0., 1.]])
+        objects['knife'].set_transform(numpy.dot(t, rotate))
+        input('next')
+    '''
     while True:
         q = grasp.grasp('knife')[1]
         robot.arm.SetJointValues(q)
@@ -31,6 +42,7 @@
         if ans.upper() == 'N':
             break
     '''
+    '''
     while True:
         q_start = robot.arm.GetJointValues()
         print('start', q_start)
